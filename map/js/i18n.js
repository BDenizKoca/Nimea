// map/js/i18n.js - Internationalization support

(function(window) {
    'use strict';

    const translations = {
        tr: {
            "addToRoute": "Rotaya Ekle",
            "clearRoute": "Rotayı Temizle",
            "showOnWiki": "Külliyatta Gör", 
            "showOnMap": "Haritada Göster",
            "edit": "Düzenle",
            "delete": "Sil",
            "confirmDelete": "işaretini silmek istediğine emin misin? Bu işlem geri alınamaz.",
            "newMarker": "Yeni İşaret Oluştur",
            "markerName": "Ad",
            "markerId": "Kimlik (ID)",
            "markerType": "Tür",
            "markerIcon": "Özel Simge", 
            "markerIconUrl": "Veya Özel Görsel URL",
            "markerFaction": "Cemiyet/Devlet",
            "autoGenerated": "İsimden otomatik üretilir; düzenleyebilirsin",
            "leaveEmpty": "Varsayılan için boş bırak",
            "customIcon": "İstersen özel bir simge karakteri yazabilirsin",
            "iconUrl": "PNG/JPG bir simge URL'si kullanabilirsin (yukarıdaki değerin yerine geçer)",
            "types": {
                "city": "Şehir",
                "town": "Kasaba",
                "village": "Köy", 
                "fortress": "Hisar",
                "ruin": "Harabe",
                "landmark": "Anıt",
                "dungeon": "Zindan",
                "other": "Diğer"
            }
        },
        en: {
            "addToRoute": "Add to Route",
            "clearRoute": "Clear Route",
            "showOnWiki": "View on Wiki",
            "showOnMap": "Show on Map", 
            "edit": "Edit",
            "delete": "Delete",
            "confirmDelete": "marker? This action cannot be undone.",
            "newMarker": "Create New Marker",
            "markerName": "Name",
            "markerId": "ID",
            "markerType": "Type",
            "markerIcon": "Custom Icon",
            "markerIconUrl": "Or Custom Image URL", 
            "markerFaction": "Faction/Nation",
            "autoGenerated": "Auto-generated from name; you can edit it",
            "leaveEmpty": "Leave empty for default",
            "customIcon": "You can enter a custom icon character if you want",
            "iconUrl": "You can use a PNG/JPG icon URL (replaces the above value)",
            "types": {
                "city": "City",
                "town": "Town", 
                "village": "Village",
                "fortress": "Fortress",
                "ruin": "Ruin",
                "landmark": "Landmark",
                "dungeon": "Dungeon",
                "other": "Other"
            }
        }
    };

    let currentLang = 'tr';

    function initI18n() {
        // Detect language from URL
        if (window.location.pathname.startsWith('/en')) {
            currentLang = 'en';
        }
        
        // Update document language
        document.documentElement.lang = currentLang;
        
        // Translate existing static content
        translateStaticContent();
    }

    function t(key, ...args) {
        let value = translations[currentLang][key];
        if (!value) {
            value = translations['tr'][key] || key;
        }
        
        // Replace placeholders with arguments
        if (args.length > 0) {
            return args.reduce((str, arg, index) => {
                return str.replace(`{${index}}`, arg);
            }, value);
        }
        
        return value;
    }

    function translateStaticContent() {
        // Update form labels and text based on current language
        if (currentLang === 'en') {
            // Update marker types in select options
            const typeSelect = document.getElementById('marker-type');
            if (typeSelect) {
                const options = typeSelect.querySelectorAll('option');
                options.forEach(option => {
                    const value = option.value;
                    if (translations.en.types[value]) {
                        option.textContent = translations.en.types[value];
                    }
                });
            }
        }
    }

    function getCurrentLang() {
        return currentLang;
    }

    function setLang(lang) {
        currentLang = lang;
        translateStaticContent();
    }

    function getType(typeKey) {
        if (!typeKey) return '';
        const map = translations[currentLang].types || {};
        return map[typeKey] || typeKey;
    }

    // Initialize on DOM ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initI18n);
    } else {
        initI18n();
    }

    // Export functions
    window.nimeaI18n = {
        t,
        getCurrentLang,
        setLang,
        initI18n,
        getType
    };

})(window);